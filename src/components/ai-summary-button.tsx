'use client';

import { useState } from 'react';
import { BrainCircuit } from 'lucide-react';

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { summarizeContent } from '@/app/actions';
import { Skeleton } from './ui/skeleton';
import { useToast } from '@/hooks/use-toast';

type AISummaryButtonProps = {
  contentToSummarize: string;
};

export function AISummaryButton({ contentToSummarize }: AISummaryButtonProps) {
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();

  const handleGetSummary = async () => {
    if (summary) return; // Don't re-fetch if summary is already there

    setIsLoading(true);
    try {
      const result = await summarizeContent({ content: contentToSummarize });
      setSummary(result.summary);
    } catch (error) {
      console.error('Error generating summary:', error);
      toast({
        title: 'Error',
        description: 'Failed to generate summary. Please try again.',
        variant: 'destructive',
      });
      setIsOpen(false);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="sm" onClick={handleGetSummary}>
          <BrainCircuit className="h-4 w-4 mr-2" />
          AI Summary
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="font-headline text-2xl">AI-Powered Summary</DialogTitle>
          <DialogDescription>
            Here is a concise summary of the content, generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="mt-4 space-y-3">
          {isLoading ? (
            <>
              <Skeleton className="h-4 w-[80%]" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-[90%]" />
            </>
          ) : (
            <p className="text-sm">{summary}</p>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
